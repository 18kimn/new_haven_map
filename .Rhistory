filter
tigris::block_groups(state = "CT", county = "New Haven") %>%
st_transform(2234) %>%
mutate(
#prop_black = P008004/P008001,
centroids = st_centroid(geometry),
intersects = as.vector(st_contains(nhv, centroids, sparse = F)))
dta <- tigris::block_groups(state = "CT", county = "New Haven") %>%
st_transform(2234) %>%
mutate(
#prop_black = P008004/P008001,
centroids = st_centroid(geometry),
intersects = as.vector(st_contains(nhv, centroids, sparse = F)))
dta %>% filter(intersects)
tigris::block_groups(state = "CT", county = "New Haven") %>%
st_transform(2234) %>%
mutate(
#prop_black = P008004/P008001,
centroids = st_centroid(geometry),
intersects = as.vector(st_contains(nhv, centroids, sparse = F))) %>%
filter(intersects) %>%
select()
tigris::block_groups(state = "CT", county = "New Haven") %>%
st_transform(2234) %>%
mutate(
#prop_black = P008004/P008001,
centroids = st_centroid(geometry),
intersects = as.vector(st_contains(nhv, centroids, sparse = F))) %>%
filter(intersects) %>%
select() %>%
write_sf("data/nhv_bgs.geojson")
plot(new_haven_sf$geometry)
plot(new_haven_sf$geometry)
dta
dta %>% filter(intersects)
dta <- dta %>% filter(intersects)
dta
plot(dta$geometry)
tigris::block_groups(state = "CT", county = "New Haven") %>%
st_transform(2234) %>%
mutate(
centroids = st_centroid(geometry),
intersects = as.vector(st_contains(nhv, centroids, sparse = F))) %>%
filter(intersects) %>%
select()
tigris::block_groups(state = "CT", county = "New Haven") %>%
st_transform(2234) %>%
mutate(
centroids = st_centroid(geometry),
intersects = as.vector(st_contains(nhv, centroids, sparse = F))) %>%
filter(intersects) %>%
select() %>% plot
file.remove("data/nhv_bgs.geojson")
tigris::block_groups(state = "CT", county = "New Haven") %>%
st_transform(2234) %>%
mutate(
centroids = st_centroid(geometry),
intersects = as.vector(st_contains(nhv, centroids, sparse = F))) %>%
filter(intersects) %>%
select() %>%
st_transform(4326) %>%
write_sf("data/nhv_bgs.geojson")
tigris::block_groups(state = "CT", county = "New Haven") %>%
st_transform(2234) %>%
mutate(
centroids = st_centroid(geometry),
intersects = as.vector(st_contains(nhv, centroids, sparse = F))) %>%
filter(intersects) %>%
select() %>%
st_transform(4326)
source('G:/My Drive/cluster_sync/schoolwork/ER&M300 - Junior seminar/final_proj/code/make.R', echo=TRUE)
# a version for d3 animation
nhv %>%
filter(!duplicated(AV_PID)) %>%
mutate(Owner_Name = str_to_title(Owner_Name)) %>%
select(Owner_Name, og_geometry) %>%
st_set_crs(3857) %>% #converting translated geometry to lon/lat EPSG:4326 coords
st_transform(4326) %>%
#st_set_precision(precision = 10^7) %>%
as_tibble() %>%
st_as_sf(sf_column_name = "og_geometry") %>%
st_zm() %>% #drops z-axis coords
st_set_crs(3857) %>% #converting original geometry to lon/lat EPSG:4326 cords
st_transform(4326) %>%
jsonlite::write_json("data/nhv_sample.json", dataframe = "columns")
# a version for d3 animation
nhv %>%
filter(!duplicated(AV_PID)) %>%
mutate(Owner_Name = str_to_title(Owner_Name)) %>%
select(Owner_Name, og_geometry) %>%
st_set_crs(3857) %>% #converting translated geometry to lon/lat EPSG:4326 coords
st_transform(4326) %>%
#st_set_precision(precision = 10^7) %>%
as_tibble() %>%
st_as_sf(sf_column_name = "og_geometry") %>%
st_zm() %>% #drops z-axis coords
st_set_crs(3857) %>% #converting original geometry to lon/lat EPSG:4326 cords
st_transform(4326) %>%
jsonlite::write_json("data/shape_shift.json", dataframe = "columns")
# a version for d3 animation
x <- nhv %>%
filter(!duplicated(AV_PID)) %>%
mutate(Owner_Name = str_to_title(Owner_Name)) %>%
select(Owner_Name, og_geometry) %>%
st_set_crs(3857) %>% #converting translated geometry to lon/lat EPSG:4326 coords
st_transform(4326) %>%
#st_set_precision(precision = 10^7) %>%
as_tibble() %>%
st_as_sf(sf_column_name = "og_geometry") %>%
st_zm() %>% #drops z-axis coords
st_set_crs(3857) %>% #converting original geometry to lon/lat EPSG:4326 cords
st_transform(4326)
log(0)
library(tidyverse)
log(-1)
library(tidyverse)
library(sf)
property_info <- read_csv("data/property_info.csv")
nhv <- read_sf("data/raw_shps/NH_Parcels_09232019.shp")
nhv <- nhv %>%
filter(!duplicated(AV_PID)) %>%
select(AV_PID) %>%
left_join(property_info, by = c("AV_PID" = "pid")) %>%
mutate(owner = str_to_title(owner) %>%
str_replace_all("Of", "of"),
owner = case_when(str_detect(owner, "City Of New Haven") ~ "City Of New Haven",
str_detect(owner, "Yale") ~ "Yale University",
T ~ owner),
address = str_to_title(address),
total_value = improvement_value + land_value,
total_value_form = total_value,
across(c(total_value_form, improvement_value, land_value), ~paste0("$", str_trim(format(.,big.mark = ",", scientific = F)))))
nhv
map(nhv, ~sum(is.na(.)))
nrow(nhv)
nhv %>% filter(is.na(living_area), !is.na(gross_area))
names(nhv)
names(nhv) %>% unique %>% length
map(nhv, ~sum(is.na(.))) %>% tibble()
map(nhv, ~sum(is.na(.))) %>% as_tibble
map(nhv, ~sum(is.na(.))) %>% as_tibble %>% pivot_longer()
map(nhv, ~sum(is.na(.))) %>% as_tibble %>% pivot_longer(cols = everything())
map(nhv, ~sum(is.na(.))) %>% as_tibble %>% pivot_longer(cols = everything()) %>% arrange(value)
nhv %>% select(contains("area"))
nhv %>% as_tibble %>% select(contains("area"))
nhv %>% as_tibble %>% select(contains("area"))  %>% drop_na()
nhv <- nhv %>%
filter(!duplicated(AV_PID)) %>%
select(AV_PID) %>%
left_join(property_info, by = c("AV_PID" = "pid")) %>%
mutate(owner = str_to_title(owner) %>%
str_replace_all("Of", "of"),
owner = case_when(str_detect(owner, "City Of New Haven") ~ "City Of New Haven",
str_detect(owner, "Yale") ~ "Yale University",
T ~ owner),
address = str_to_title(address),
total_value = improvement_value + land_value,
total_value_form = total_value,
zone = ifelse(!is.na(zone_description) & !is.na(zoneclean),
paste0("<br>Zone: ", zone_description , " (", zoneclean, ")"),
"<br>Zoning information not available."),
year_built = ifelse(!is.na(year_built),
paste0(".</strong><br>Built in ", year_built),
"<br> Year built not available."),
gross_area = ifelse(!is.na(gross_area),
paste0("<p>Building area: ", gross_area),
"<br>Gross area not available."),
across(c(total_value_form, improvement_value, land_value), ~paste0("$", str_trim(format(.,big.mark = ",", scientific = F)))),
label = paste0("<h3><strong>", address, "</strong></h3><p> Owned by <strong>" ,
owner, year_built,
zone,
"<br>Land value: ", land_value,
"<br>Total value: ", total_value_form,
gross_area,
" sq ft<br>Property area: ", landsize, "acres</p>"
),
label = ifelse(is.na(address), "Property information not available.", label)) %>%
st_set_crs(3857) %>%
st_transform(4326) %>%
rmapshaper::ms_simplify(keep_shapes=T) %>% #ms_simplify() is to blame for the runtime on this sentence
select(label, total_value)
nhv$label
nhv %>% filter(str_detect(label, "NA"))
nhv$label[1]
library(tidyverse)
library(sf)
property_info <- read_csv("data/property_info.csv")
nhv <- read_sf("data/raw_shps/NH_Parcels_09232019.shp")
nhv <- nhv %>%
filter(!duplicated(AV_PID)) %>%
select(AV_PID) %>%
left_join(property_info, by = c("AV_PID" = "pid")) %>%
mutate(owner = str_to_title(owner) %>%
str_replace_all("Of", "of"),
owner = case_when(str_detect(owner, "City Of New Haven") ~ "City Of New Haven",
str_detect(owner, "Yale") ~ "Yale University",
T ~ owner),
address = str_to_title(address),
total_value = improvement_value + land_value,
total_value_form = total_value,
zone = ifelse(!is.na(zone_description) & !is.na(zoneclean),
paste0("<br>Zone: ", zone_description , " (", zoneclean, ")"),
"<br>Zoning information not available."),
year_built = ifelse(!is.na(year_built),
paste0("</strong><br>Built in ", year_built),
"</strong><br> Year built not available."),
gross_area = ifelse(!is.na(gross_area),
paste0("<p>Building area: ", gross_area),
"<br>Gross area not available."),
across(c(total_value_form, improvement_value, land_value), ~paste0("$", str_trim(format(.,big.mark = ",", scientific = F)))),
label = paste0("<h3><strong>", address, "</strong></h3><p> Owned by <strong>" ,
owner, year_built,
zone,
"<br>Land value: ", land_value,
"<br>Total value: ", total_value_form,
gross_area,
" sq ft<br>Property area: ", landsize, "acres</p>"
),
label = ifelse(is.na(address), "Property information not available.", label)) %>%
st_set_crs(3857) %>%
st_transform(4326) %>%
#rmapshaper::ms_simplify(keep_shapes=T) %>% #ms_simplify() is to blame for the runtime on this sentence (update: decided since im sending this to mapbox it doesnt matter)
select(label, total_value)
file.remove("data/property_values.geojson")
st_write(nhv, "data/property_values.geojson", append = F)
# block-level geometry set
nhv_outline <- st_union(cwi::new_haven_sf)
nhv
nhv$label[1]
source('G:/My Drive/cluster_sync/schoolwork/ER&M300 - Junior seminar/final_proj/code/clean_property_values.R', echo=TRUE)
rm(list=ls())
source('G:/My Drive/cluster_sync/schoolwork/ER&M300 - Junior seminar/final_proj/code/clean_property_values.R', echo=TRUE)
library(tidycensus)
x <- load_variables(2010, "sf1")
View(x)
x <- load_variables(2018, "acs5")
B01002_001
source('G:/My Drive/cluster_sync/schoolwork/ER&M300 - Junior seminar/final_proj/code/clean_property_values.R', echo=TRUE)
warnings()
nhv
nhv <- nhv %>%
mutate(geometry = st_centroid(geometry)) %>%
st_join(nhv_blocks, join = st_within) %>%
st_drop_geometry() %>%
group_by(GEOID10) %>%
summarize(total_value = mean(total_value, na.rm=T)) %>%
mutate(total_value = str_trim(format(total_value,big.mark = ",", scientific = F))) %>%
left_join(nhv_blocks, by = "GEOID10")
source('G:/My Drive/cluster_sync/schoolwork/ER&M300 - Junior seminar/final_proj/code/clean_property_values.R', echo=TRUE)
nhv_block
st_write(nhv_block, "data/property_values_block.geojson", append = F)
warnings()
x <- read_sf("data/property_values_block.geojson")
x
x <- read_sf("data/property_values.geojson")
x
nhv_block
file.remove("data/propert_values_block.geojson")
file.remove("data/property_values_block.geojson")
st_write(nhv_block, "data/property_values_block.geojson", append = F)
x <- read_sf("data/property_values_block.geojson")
x
nhv_block <- nhv %>%
mutate(geometry = st_centroid(geometry)) %>%
st_join(nhv_blocks, join = st_within) %>%
st_drop_geometry() %>%
group_by(GEOID10) %>%
summarize(total_value = mean(total_value, na.rm=T)) %>%
mutate(total_value = paste0("$", str_trim(format(total_value,big.mark = ",", scientific = F)))) %>%
left_join(nhv_blocks, by = "GEOID10")
file.remove("data/property_values_block.geojson")
st_write(nhv_block, "data/property_values_block.geojson", append = F)
nhv$label[1]
htmltools::html_print(nhv$label[1])
htmltools::html_print("<h3><strong>149 Marion St</strong></h3>")
library(htmltools)
?html_print
x <- read_sf("data/raw_shps/NH_Parcels_09232019.shp")
x %>% select(gross_area, landsize)
x %>% select( landsize)
x <- x %>%
filter(!duplicated(AV_PID)) %>%
select(AV_PID) %>%
left_join(property_info, by = c("AV_PID" = "pid")) %>%
mutate(owner = str_to_title(owner) %>%
str_replace_all("Of", "of"),
owner = case_when(str_detect(owner, "City Of New Haven") ~ "City Of New Haven",
str_detect(owner, "Yale") ~ "Yale University",
T ~ owner),
address = str_to_title(address),
total_value = improvement_value + land_value,
total_value_form = total_value,
zone = ifelse(!is.na(zone_description) & !is.na(zoneclean),
paste0("<br>Zone: ", zone_description , " (", zoneclean, ")"),
"<br>Zoning information not available."),
year_built = ifelse(!is.na(year_built),
paste0("</strong><br>Built in ", year_built),
"</strong><br>Year built not available."),
gross_area = ifelse(!is.na(gross_area),
paste0("<p>Building area: ", gross_area, " sq ft"),
"<p>Gross area not available."),
across(c(total_value_form, improvement_value, land_value), ~paste0("$", str_trim(format(.,big.mark = ",", scientific = F)))),
label = paste0("<h3><strong>", address, "</strong></h3><p> Owned by <strong>" ,
owner, year_built,
zone,
"<br>Land value: ", land_value,
"<br>Total value: ", total_value_form,
gross_area,
"<br>Property area: ", landsize, "acres</p>"
),
label = ifelse(is.na(address), "Property information not available.", label))
x
x %>% select(landsize, gross_area)
x %>% drop_na(landsize)
x %>% drop_na(landsize, address)
source('G:/My Drive/cluster_sync/schoolwork/ER&M300 - Junior seminar/final_proj/code/clean_property_values.R', echo=TRUE)
source('G:/My Drive/cluster_sync/schoolwork/ER&M300 - Junior seminar/final_proj/code/clean_property_values.R', echo=TRUE)
nhv_block
nhv
nhv_block <- nhv %>%
mutate(geometry = st_centroid(geometry)) %>%
st_join(nhv_blocks, join = st_within) %>%
st_drop_geometry() %>%
group_by(GEOID10) %>%
summarize(total_value = mean(total_value, na.rm=T)) %>%
mutate(print_value = paste0("$", str_trim(format(total_value,big.mark = ",", scientific = F)))) %>%
left_join(nhv_blocks, by = "GEOID10")
file.remove("data/property_values_block.geojson")
st_write(nhv_block, "data/property_values_block.geojson", append = F)
read_sf("data/holc/holc_ad_data.shp") %>%
filter(city == "New Haven") %>%
select(holc_id, holc_grade
)
holc <- read_sf("data/holc/holc_ad_data.shp") %>%
filter(city == "New Haven") %>%
select(holc_id, holc_grade)
#% of population that are Black for each New Haven block
#maybe this should probably be uploaded as a mapbox tileset?
nhv <- new_haven_sf %>% st_transform(2234) %>% st_union()
library(tidyverse)
library(sf)
library(cwi)
library(tidycensus)
#% of population that are Black for each New Haven block
#maybe this should probably be uploaded as a mapbox tileset?
nhv <- new_haven_sf %>% st_transform(2234) %>% st_union()
nhv <- new_haven_sf %>% st_transform(2234) %>% st_union()
file.remove("data/prop_black.geojson")
dta <-get_decennial("block", variables = c("P008001", "P008004"),
state = "CT", county = "New Haven", geometry = T,
output = "wide")  %>%
st_transform(2234) %>%
mutate(prop_black = P008004/P008001,
centroids = st_centroid(geometry),
intersects = as.vector(st_contains(nhv, centroids, sparse = F))) %>%
filter(intersects, !is.na(prop_black)) %>%
select(prop_black)
dta
holc
dta
dta <-get_decennial("block", variables = c("P008001", "P008004"),
state = "CT", county = "New Haven", geometry = T,
output = "wide")  %>%
st_transform(2234) %>%
mutate(prop_black = P008004/P008001,
centroids = st_centroid(geometry),
intersects = as.vector(st_contains(nhv, centroids, sparse = F))) %>%
filter(intersects, !is.na(prop_black)) %>%
select(centroids, prop_black)
dta
st_contains(holc, dta$centroids)
st_contains(st_transform(holc, dta), dta$centroids)
st_contains(st_transform(holc, st_crs(dta)), dta$centroids)
as.matrix(st_contains(st_transform(holc, dta), dta$centroids))
st_contains(st_transform(holc, st_crs(dta)), dta$centroids)
as.matrix(st_contains(st_transform(holc, st_crs(dta)), dta$centroids))
as.list(st_contains(st_transform(holc, st_crs(dta)), dta$centroids))
st_contains(st_transform(holc, st_crs(dta)), dta$centroids) %>% class
st_contains(st_transform(holc, st_crs(dta)), dta$centroids)[[1]]
st_contains(st_transform(holc, st_crs(dta)), dta$centroids)[[7]]
unlist(map(st_contains(st_transform(holc, st_crs(dta)), dta$centroids), ~.[1]))
nrow(holc)
unlist(map(st_within(dta$centroids, st_transform(holc, st_crs(dta))), ~.[1]))
unlist(map(st_within(dta$centroids, st_transform(holc, st_crs(dta))), ~length(.)))
unlist(map(st_within(dta$centroids, st_transform(holc, st_crs(dta))), ~length(.))) %>% table
unlist(map(st_within(dta$centroids, st_transform(holc, st_crs(dta))), .))
unlist(st_within(dta$centroids, st_transform(holc, st_crs(dta))
)
)
unlist(st_within(dta$centroids, st_transform(holc, st_crs(dta)))) %>% length
nrow(dta)
dta <-get_decennial("block", variables = c("P008001", "P008004"),
state = "CT", county = "New Haven", geometry = T,
output = "wide")  %>%
st_transform(2234) %>%
mutate(prop_black = P008004/P008001,
centroids = st_centroid(geometry),
intersects = as.vector(st_contains(nhv, centroids, sparse = F))) %>%
filter(intersects, !is.na(prop_black)) %>%
select(centroids, prop_black) %>%
mutate(holc = st_within(dta$centroids, st_transform(holc, st_crs(dta))) %>%
map(~.[1]) %>% #necessary to turn blocks iwth no HOLC id to NA and thus get a vector of the right length
unlist()) %>%
#spatial join to find what HOLC district this block is in. weird syntax :/
st_as_sf() %>%
st_set_crs(2234) %>%
st_transform(4326) %>%
rmapshaper::ms_simplify()
dta
dta <-get_decennial("block", variables = c("P008001", "P008004"),
state = "CT", county = "New Haven", geometry = T,
output = "wide")  %>%
st_transform(2234) %>%
mutate(prop_black = P008004/P008001,
centroids = st_centroid(geometry),
intersects = as.vector(st_contains(nhv, centroids, sparse = F))) %>%
filter(intersects, !is.na(prop_black)) %>%
mutate(holc = st_within(dta$centroids, st_transform(holc, st_crs(dta))) %>%
map(~.[1]) %>% #necessary to turn blocks iwth no HOLC id to NA and thus get a vector of the right length
unlist()) %>%
select(prop_black, holc) %>%
#spatial join to find what HOLC district this block is in. weird syntax :/
st_as_sf() %>%
st_set_crs(2234) %>%
st_transform(4326) %>%
rmapshaper::ms_simplify()
dta
holc
dta <-get_decennial("block", variables = c("P008001", "P008004"),
state = "CT", county = "New Haven", geometry = T,
output = "wide")  %>%
st_transform(2234) %>%
mutate(prop_black = P008004/P008001,
centroids = st_centroid(geometry),
intersects = as.vector(st_contains(nhv, centroids, sparse = F))) %>%
filter(intersects, !is.na(prop_black)) %>%
mutate(holc = st_within(centroids, st_transform(holc, st_crs(.))) %>%
map(~.[1]) %>% #necessary to turn blocks iwth no HOLC id to NA and thus get a vector of the right length
unlist()) %>%
select(prop_black, holc) %>%
#spatial join to find what HOLC district this block is in. weird syntax :/
st_as_sf() %>%
st_set_crs(2234) %>%
st_transform(4326) %>%
rmapshaper::ms_simplify()
dta
write_sf(dta, "data/prop_black.geojson", overwrite = T)
dta
holc
dta <-get_decennial("block", variables = c("P008001", "P008004"),
state = "CT", county = "New Haven", geometry = T,
output = "wide")  %>%
st_transform(2234) %>%
mutate(prop_black = P008004/P008001,
centroids = st_centroid(geometry),
intersects = as.vector(st_contains(nhv, centroids, sparse = F))) %>%
filter(intersects, !is.na(prop_black)) %>%
mutate(holc = st_within(centroids, st_transform(holc, st_crs(.))) %>%
map(~holc$holc_id[.[1]]) %>% #necessary to turn blocks iwth no HOLC id to NA and thus get a vector of the right length
unlist()) %>%
select(prop_black, holc) %>%
#spatial join to find what HOLC district this block is in. weird syntax :/
st_as_sf() %>%
st_set_crs(2234) %>%
st_transform(4326) %>%
rmapshaper::ms_simplify()
dta
dta %>% select(holc) %>% plot
write_sf(dta, "data/prop_black.geojson", overwrite = T)
file.remove("data/prop_black.geojson")
write_sf(dta, "data/prop_black.geojson", overwrite = T)
read_sf("data/prop_black.geojson")
holc <- read_sf("data/holc/holc_ad_data.shp") %>%
filter(city == "New Haven") %>%
select(holc_id, holc_grade) %>%
mutate(centroid = st_centroid(.))
holc
holc <- read_sf("data/holc/holc_ad_data.shp") %>%
filter(city == "New Haven") %>%
select(holc_id, holc_grade) %>%
mutate(x = st_coordinates(st_centroid(geometry)))
holc
holc <- read_sf("data/holc/holc_ad_data.shp") %>%
filter(city == "New Haven") %>%
select(holc_id, holc_grade) %>%
mutate(x = st_coordinates(st_centroid(geometry))[,"X"])
holc
holc$x
write_sf(holc, "data/holc.geojson") #already in EPSG:4326 -> nice
#HOLC neighborhood classifications (redlined neighborhoods)
file.remove("data/holc.geojson")
write_sf(holc, "data/holc.geojson") #already in EPSG:4326 -> nice
#HOLC neighborhood classifications (redlined neighborhoods)
file.remove("data/holc.geojson")
#HOLC neighborhood classifications (redlined neighborhoods)
file.remove("data/holc.geojson")
library(tidyverse)
library(sf)
library(cwi)
library(tidycensus)
#HOLC neighborhood classifications (redlined neighborhoods)
file.remove("data/holc.geojson")
holc <- read_sf("data/holc/holc_ad_data.shp") %>%
filter(city == "New Haven") %>%
select(holc_id, holc_grade) %>%
mutate(x = st_coordinates(st_centroid(geometry))[,"X"])
write_sf(holc, "data/holc.geojson") #already in EPSG:4326 -> nice
holc
holc$x %>% range
holc$x %>% summary
read_sf("data/holc.geojson")
read_sf("data/property_values_block.geojson")
